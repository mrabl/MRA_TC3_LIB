<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="fb_Klappe" Id="{daf3aea7-a131-44c9-98e7-195a1b4f2fdf}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK fb_Klappe
(*Klappe - AUF/ZU [1DO] mit Motorschutzschalter*)																


VAR_INPUT
	DDC	:BOOL;	(* 	DDC Betrieb	*)
	FRG	:BOOL;	(* 	Freigabe		*)
	P_HA	:BOOL;	(* 	Panel H/A		*)
	AUTO_AUF	:BOOL;	(* 		*)
	QUITT	:BOOL;	(* 	Störquittierung				*)
	RM_AUF	:BOOL;	(* 	offen	*)
	RM_ZU	:BOOL;	(* 	geschlossen	*)
	BLOCK	:BOOL;	(* 	Blockierschutz	*)
	T_BLOCK	:TIME;	(* 	Aktivierungszeit Blockierschutz	*)
	T_RM	:TIME;	(* 	Rückmeldefehler Zeit		*)
	STOE	:BOOL;	(* 	Störung Motorschutz	*)
	U_IO	:BOOL;	(* 	Spannungsüberwachung			*)
	KONFIG	:BYTE;	(* 	Konfiguration*)
END_VAR

VAR_IN_OUT
	V_SB	:BYTE;	(* 	VISU SB		*)
	V_ST	:BYTE;	(* 	VISU Stufen		*)
	Visu	:Klappe_ST;
END_VAR

VAR_OUTPUT
	NOTB	:BOOL;	(* 	LVB	*)
	TA_P	:BOOL;	(* 	Teilautomatik Panel		*)
	TA_V	:BOOL;	(* 	Teilautomatik VISU		*)
	TA_G	:BOOL;	(* 	Teilautomatik GLT	*)
	S_TA	:BOOL;	(* 	Teilautomatik		*)
	AUF	:BOOL;	(* 	Auf		*)
	STOE_RM	:BOOL;	(* 	Störung Rückmeldung		*)
	STOE_MS	:BOOL;	(* 	Störung Motorschutz	*)
	SA	:BOOL;	(* 	Störung		*)
	BLOCK_EIN	:BOOL;	(* 	Blockierschutz aktiv	*)
	Sperre:BOOL; (*Sperre des Antriebs übergeordnet*)
	RM_offen:BOOL; (*Anzeige Offen Mmeldung*)
	RM_geschlossen:BOOL; (*Anzeige Geschlosen Meldung*)
END_VAR																
VAR
	RMFAuf	:TON;
	RMFZu	:TON;
	QuittRMF	:BOOL;
	Maske	:BYTE;														
	NOTBx	:BOOL;
	TA_Px	:BOOL;														
	TA_Vx	:BOOL;														
	TA_Gx	:BOOL;														
	S_TAx	:BOOL;
	STOE_RM_AUFx	:BOOL;														
	STOE_RM_ZUx	:BOOL;														
	SAx	:BOOL;														
	STOE_MSx	:BOOL;														
	U_IO_Verz	:TON;
	U_IO_X	:BOOL;
	P_AUF	:BOOL;	(* 	Panel Auf	*)
	TON_BLOCK	:TON;
	TP_BLOCK	:TP;
	V_SB_UA_M	:BYTE;														
	V_ST_UA_M	:BYTE;														
	V_STELL_UA_M	:REAL;
	V_SB_M	:BYTE;														
	V_ST_M	:BYTE;														
	V_STELL_M	:REAL;
	
	//MRA
	R_TRIG_RM_AUF : Tc2_Standard.R_TRIG;
	F_TRIG_RM_AUF : Tc2_Standard.F_TRIG;
	R_TRIG_RM_ZU  : Tc2_Standard.R_TRIG;
	F_TRIG_RM_ZU  : Tc2_Standard.F_TRIG;
	ENLAGEN_UW_AUF : BOOL;
	ENLAGEN_UW_ZU : BOOL;
	ANLAGE_HANDBETRIEB: BOOL;
END_VAR																
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*Auswertung UA / konventionell*)
IF Visu.V_SB <> V_SB_UA_M THEN
    V_SB_UA_M := Visu.V_SB;
    V_SB_M := Visu.V_SB;
    V_SB := Visu.V_SB;
END_IF;

IF V_SB <> V_SB_M THEN
    V_SB_UA_M := V_SB;
    V_SB_M := V_SB;
    Visu.V_SB := V_SB;
END_IF;

IF Visu.V_ST <> V_ST_UA_M THEN
    V_ST_UA_M := Visu.V_ST;
    V_ST_M := Visu.V_ST;
    V_ST := Visu.V_ST;
END_IF;

IF V_ST <> V_ST_M THEN
    V_ST_UA_M := V_ST;
    V_ST_M := V_ST;
    Visu.V_ST := V_ST;
END_IF;



(*Auswertung VISU/GLT*)
CASE BYTE_TO_INT (V_SB) OF
	1:	TA_Vx	:= TRUE;
		TA_Gx	:= FALSE;
	2:	TA_Vx	:= FALSE;
		TA_Gx	:= TRUE;
	ELSE
		TA_Vx	:= FALSE;
		TA_Gx	:= FALSE;
END_CASE;

(*Initalisierung Stossfreie Umschaltung*)
IF NOT (TA_Gx OR TA_Vx)  THEN
	IF AUF THEN
		V_ST  := 1;
		Visu.V_ST  := 1;
	ELSE
		V_ST := 0;
		Visu.V_ST  := 0;
	END_IF;
END_IF;
IF NOT TA_Px  THEN
	P_AUF  := AUF;
END_IF;

(*Auswertung Panel*)
TA_Px := P_HA;

(*Auswertung Notbetrieb*)
Notbx := NOT DDC;

(*Auswertung Teilautomatik*)
Maske := Konfig AND 2#00010000;
IF Maske = 16 THEN
	S_TAx := TA_Vx OR TA_Gx OR TA_Px;
	ELSE S_TAx := TA_Vx OR TA_Gx OR TA_Px OR Notbx;
END_IF;

R_TRIG_RM_AUF(CLK := RM_AUF);
F_TRIG_RM_AUF(CLK := RM_AUF);
R_TRIG_RM_ZU(CLK := RM_ZU);
F_TRIG_RM_ZU(CLK := RM_ZU);

(*Auswertung Rückmeldefehler*)
IF AUTO_AUF AND R_TRIG_RM_AUF.Q THEN
	ENLAGEN_UW_AUF := TRUE;
ELSIF NOT AUTO_AUF THEN
	ENLAGEN_UW_AUF := FALSE;	
END_IF

IF NOT AUTO_AUF AND R_TRIG_RM_ZU.Q THEN
	ENLAGEN_UW_ZU := TRUE;
ELSIF AUTO_AUF THEN
	ENLAGEN_UW_ZU := FALSE;	
END_IF

IF (ENLAGEN_UW_AUF AND NOT RM_AUF) OR (ENLAGEN_UW_ZU AND NOT RM_ZU)  THEN
	ANLAGE_HANDBETRIEB := TRUE;
ELSIF QUITT AND (((ENLAGEN_UW_AUF AND RM_AUF) OR (ENLAGEN_UW_ZU AND RM_ZU)) OR (NOT ENLAGEN_UW_AUF OR NOT ENLAGEN_UW_ZU))  THEN
	ANLAGE_HANDBETRIEB := FALSE;
END_IF




RMFAuf (IN:=(((RM_AUF XOR AUF) AND DDC) OR Stoe_Rm_AUFx) AND NOT QuittRMF, PT:=T_RM);
RMFZu  (IN:=(((RM_ZU XOR NOT AUF) AND DDC) OR Stoe_Rm_ZUx) AND NOT QuittRMF, PT:=T_RM);
Stoe_Rm_AUFx := RMFAuf.Q OR ANLAGE_HANDBETRIEB;
Stoe_Rm_ZUx := RMFZu.Q OR ANLAGE_HANDBETRIEB;

(*Auswertung Motorschutz*)
Stoe_Msx := (NOT Stoe OR Stoe_Msx) AND NOT (Stoe AND Quitt);

(*Auswertung Störung*)
Maske := Konfig AND 2#00001000;
IF Maske = 8 THEN
	SAx := Stoe_Msx OR (Stoe_Rm_Aufx OR Stoe_Rm_Zux);
	ELSE	SAx := Stoe_Msx OR (Stoe_Rm_Aufx OR Stoe_Rm_Zux);
END_IF;

(*Quittierung Rückmeldefehler*)
QuittRMF := FALSE;
Maske := Konfig AND 2#00000001;
IF Maske = 1 THEN
	IF (Auf AND Rm_Auf OR NOT Auf AND RM_Zu) AND (Stoe_Rm_Aufx OR Stoe_Rm_Zux) AND Quitt THEN
		QuittRMF := TRUE;
	END_IF;
	ELSE IF (Stoe_Rm_Aufx OR Stoe_Rm_Zux) AND Quitt THEN
		QuittRMF := TRUE;
	END_IF;
END_IF;

(*Ansteuerung Antrieb*)
IF FRG AND DDC AND NOT Stoe_Msx THEN
	Auf := Auto_Auf;
	IF TA_Gx OR TA_Vx THEN
		Maske := 2#00000001;
		Auf := BYTE_TO_BOOL (Maske AND V_ST);
	END_IF;
	IF TA_Px THEN
		Auf := P_Auf;
	END_IF;
		Auf := Auf OR  TP_BLOCK.Q;	(*Blockierschutz*);
	IF (Stoe_Rm_Aufx OR Stoe_Rm_Zux) THEN	(*Bei Rückmeldefehler Antrieb = Ein || Antrieb = Aus || Antrieb = Auto*)
		Maske := Konfig AND 2#00000110;
		IF Maske = 4 THEN
			Auf := Auf;
			ELSE IF Maske = 2 THEN
				Auf := TRUE;
				ELSE Auf := FALSE;
			END_IF;
		END_IF;
	END_IF;




	(*Blockierschutz*)
	TON_BLOCK (IN:= BLOCK AND NOT Auf, PT:=T_BLOCK);
	TP_BLOCK (IN:= TON_BLOCK.Q, PT:= T#10s);
	IF TP_BLOCK.Q THEN
		AUF := TRUE;
	END_IF;

	BLOCK_EIN := TP_BLOCK.Q;

	ELSE AUF := FALSE;
END_IF;
(*Meldeunterdrückung*)
U_IO_Verz(IN:=U_IO, PT:=T#5s);
U_IO_X := U_IO_Verz.Q;
IF U_IO_X THEN
	NOTB	:=	NOTBx	;
	TA_P	:=	TA_Px	;
	TA_V	:=	TA_Vx	;
	TA_G	:=	TA_Gx	;
	S_TA	:=	S_TAx	;
	STOE_RM	:=	(Stoe_Rm_Aufx OR Stoe_Rm_Zux)	;
	STOE_MS	:=	STOE_MSx	;
	SA	:=	SAx	;
END_IF;

RM_offen:= RM_AUF;
RM_geschlossen:= RM_ZU;


Sperre:=NOT FRG;

VISU.NOTB    :=    NOTB;
VISU.TA_P    :=    TA_P;
VISU.TA_V    :=    TA_V;
VISU.TA_G    :=    TA_G;

VISU.RM		:=    FALSE;
VISU.RM_AUF	:=	RM_AUF;
VISU.RM_ZU	:=	RM_ZU;
VISU.RM_ST1	:=	FALSE;
VISU.RM_ST2	:=	FALSE;
VISU.RM_ST3	:=	FALSE;

VISU.STOE_RM		:=    STOE_RM;
VISU.STOE_MS		:=    STOE_MS;
VISU.STOE_FU	 	:=    FALSE;
VISU.Stoe_Lauf		:=    FALSE;
VISU.Wart			:=	FALSE;
VISU.STOE_STB	:=	FALSE;
VISU.STOE_STROEM	:=	FALSE;
VISU.STOE_FEUCHTE	:=	FALSE;

VISU.Y_OG			:=	0;
VISU.Y_UG			:=	0;
VISU.RM_X  		:=    0;

Visu.Status.0:=RM_AUF;
Visu.Status.1:=SA;
Visu.Status.2:=RM_ZU;
Visu.Status.3:=S_TA;
Visu.Status.4:=NOT RM_AUF AND NOT RM_ZU;
Visu.Status.5:=Sperre;
Visu.Status.6:=NOT NOTB;
Visu.Status.7:=AUF;]]></ST>
    </Implementation>
    <LineIds Name="fb_Klappe">
      <LineId Id="378" Count="206" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>