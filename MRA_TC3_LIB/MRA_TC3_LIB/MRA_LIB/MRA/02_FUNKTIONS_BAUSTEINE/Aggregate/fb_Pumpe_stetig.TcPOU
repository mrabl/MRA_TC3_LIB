<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="fb_Pumpe_stetig" Id="{e0ff410c-988e-49f7-843b-aba156a9c90c}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK fb_Pumpe_stetig
(*Antrieb mit FU*)

VAR_INPUT
	DDC	:BOOL;	(* 	DDC Betrieb	*)
	HAND_FU	:BOOL;	(*	Handbetrieb FU	*)
	FRG	:BOOL;	(* 	Freigabe	*)
	P_HA	:BOOL;	(* 	Panel H/A	*)
	AUTO	:BOOL;	(* 	Auto Betrieb	*)
	AUTO_STELL	:REAL;	(* 	Auto Stellbefehl	*)
	QUITT	:BOOL;	(* 	Störquittierung	*)
	RM	:BOOL;	(* 	RM Betrieb FU	*)
	T_RM	:TIME;	(* 	Rückmeldefehler Zeit	*)
	STOE	:BOOL;	(* 	Störung Motorschutz	*)
	SA_FU	:BOOL;	(* 	Störung FU	*)
	REP	:BOOL;	(* 	Rep.-Schalter	*)
	LAUF	:BOOL;	(* 	Laufüberwachung	*)
	T_LAUF	:TIME;	(* 	Laufüberwachung Zeit	*)
	RM_Y	:INT;	(*	Rückmeldung	*)
	Y_OG	:REAL;	(*	Obergrenze	*)
	Y_UG	:REAL;	(*	Untergrenze	*)
	U_IO	:BOOL;	(* 	Spannungsüberwachung	*)
	KONFIG	:BYTE;	(* 	Konfiguration	*)
	Reset_BSZ:BOOL;	(* 	Rücksetzen BSZ	*)
END_VAR					
VAR_IN_OUT
	V_SB	:BYTE;	(* 	VISU SB	*)
	V_ST	:BYTE;	(* 	VISU Stufen	*)
	V_STELL	:REAL;	(* 	VISU Stellbefehl	*)
	BSZ:REAL;			(* 	Betriebsstundenzähler*)
END_VAR

VAR_OUTPUT
	NOTB	:BOOL;	(* 	LVB	*)
	TA_P	:BOOL;	(* 	Teilautomatik Panel	*)
	TA_V	:BOOL;	(* 	Teilautomatik VISU	*)
	TA_G	:BOOL;	(* 	Teilautomatik GLT	*)
	S_TA	:BOOL;	(* 	Teilautomatik	*)
	EIN	:BOOL;		(* 	Betrieb FU	*)
	Betrieb:BOOL;	(* 	Betriebsmeldung	*)
	RM_X	:REAL;	(*	Rückmeldung	*)
	Y	:REAL;		(*	Stellsignal	*)
	Y_OUT	:INT;	(*	Stellsignal	*)
	STOE_RM	:BOOL;	(* 	Störung Rückmeldung	*)
	STOE_MS	:BOOL;	(* 	Störung Motorschutz	*)
	STOE_FU	:BOOL;	(* 	Störung FU	*)
	STOE_LAUF	:BOOL;	(* 	Störung Laufüberwachung	*)
	WART	:BOOL;	(* 	Reparatur	*)
	SA	:BOOL;	(* 	Störung	*)
	Sperre:BOOL; (*Übergeordnete Sperre Antrieb*)

END_VAR
VAR
	BSZ_Pumpe: FB_ALB_BSZ;
	Wartung:REAL;
	Intervall_WA:REAL:=0;
	P_EIN	:BOOL;	(* 	Panel Ein	*)
	P_STELL	:REAL;	(* 	Panel Stellbefehl	*)
	RMF	:TON;
	LaufZeit	:TON;
	QuittRMF	:BOOL;														
	Maske	:BYTE;														
	NOTBx	:BOOL;
	TA_Px	:BOOL;
	TA_Vx	:BOOL;														
	TA_Gx	:BOOL;
	S_TAx	:BOOL;
	STOE_RMx	:BOOL;														
	STOE_MSx	:BOOL;
	SAx	:BOOL;
	Wartx	:BOOL;														
	Stoe_Laufx	:BOOL;
	Stoe_Fux	:BOOL;
	Yx	:REAL;
	m	:REAL;														
	b	:REAL;														
	U_IO_Verz	:TON;														
	U_IO_X	:BOOL;



	V_SB_UA_M	:BYTE;														
	V_ST_UA_M	:BYTE;
	V_STELL_UA_M	:REAL;														
	V_SB_M	:BYTE;														
	V_ST_M	:BYTE;
	V_STELL_M	:REAL;														
END_VAR																
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*Auswertung UA / konventionell*)


IF V_SB <> V_SB_M THEN
    V_SB_UA_M := V_SB;
    V_SB_M := V_SB;
END_IF;



IF V_ST <> V_ST_M THEN
    V_ST_UA_M := V_ST;
    V_ST_M := V_ST;

END_IF;



IF V_STELL <> V_STELL_M THEN
    V_STELL_UA_M := V_STELL;
    V_STELL_M := V_STELL;
 
END_IF;

(*Auswertung VISU/GLT*)
CASE BYTE_TO_INT (V_SB) OF
    1:    	TA_Vx    := TRUE;
      	  	TA_Gx    := FALSE;
    2:    	TA_Vx    := FALSE;
       		TA_Gx    := TRUE;
    ELSE
        TA_Vx    := FALSE;
        TA_Gx    := FALSE;
END_CASE;

(*Auswertung Panel*)
TA_Px := P_HA;

(*Auswertung Notbetrieb*)
Notbx := NOT DDC OR NOT HAND_FU;

(*Initalisierung Stossfreie Umschaltung*)
IF (NOT (TA_Gx OR TA_Vx)) OR TA_Px THEN
    IF EIN THEN
        V_ST  := 1;
        Visu.V_ST := 1;
        ELSE
            V_ST := 0;
         
    END_IF;
    V_STELL := Y;
  
ELSE
    IF V_ST = 0  THEN
        V_STELL := 0;
     
    END_IF;
END_IF;
IF NOT TA_Px  THEN
    P_EIN  := EIN;
    P_STELL := Y;
ELSE
    IF NOT P_EIN THEN
        P_STELL := 0;
    END_IF;
END_IF;

(*Auswertung Teilautomatik*)
Maske := Konfig AND 2#00010000;
IF Maske = 16 THEN
    S_TAx := TA_Vx OR TA_Gx OR TA_Px;
    ELSE S_TAx := TA_Vx OR TA_Gx OR TA_Px OR Notbx;
END_IF;

(*Auswertung Rückmeldefehler*)
RMF(IN:=(((Ein XOR Rm) AND DDC) OR Stoe_Rmx) AND NOT QuittRMF, PT:=T_RM);
Stoe_Rmx := RMF.Q;

(*Auswertung Motorschutz*)
Stoe_Msx := (NOT Stoe OR Stoe_Msx) AND NOT (Stoe AND Quitt);

(*Auswertung Störung FU*)
Stoe_FUx := (NOT SA_FU OR Stoe_FUx) AND NOT (SA_FU AND Quitt);

(*Auswertung Störung*)
Maske := Konfig AND 2#00001000;
IF Maske = 8 THEN
    SAx := Stoe_Msx OR Stoe_Rmx OR Stoe_Laufx OR Wartx OR Stoe_FUx ;
    ELSE    SAx := Stoe_Msx OR Stoe_Rmx OR Stoe_Laufx OR Stoe_FUx ;
END_IF;

(*Auswertung Rep.-Schalter*)
IF Maske = 8 THEN
    Wartx := NOT REP OR Wartx AND NOT Quitt;
    ELSE Wartx := NOT REP;
END_IF;

(*Auswertung Laufüberwachung*)
LaufZeit(IN:=((RM AND NOT Lauf) OR Stoe_Laufx) AND NOT Quitt, PT:= T_Lauf);
Stoe_Laufx := LaufZeit.Q;

(*Quittierung Rückmeldefehler*)
QuittRMF := FALSE;
Maske := Konfig AND 2#00000001;
IF Maske = 1 THEN
    IF (Ein = Rm) AND Stoe_Rmx AND Quitt THEN
        QuittRMF := TRUE;
    END_IF;
    ELSE IF Stoe_Rmx AND Quitt THEN
        QuittRMF := TRUE;
    END_IF;
END_IF;

(*Ansteuerung Antrieb*)
IF FRG AND DDC AND NOT Stoe_Msx AND NOT Wartx AND NOT Stoe_Laufx AND NOT Stoe_FUx THEN
    Ein := Auto;
    IF NOT Auto THEN
        Auto_Stell := 0;
    END_IF;
    m := ((Y_OG - Y_UG) / 100);    (*Steigung*)
    b := Y_UG;                    (*Nulldurchgang*)
    Yx := m * Auto_Stell + b;        (*Geradengleichung*)
    IF TA_Gx OR TA_Vx THEN
        Maske := 2#00000001;
        Ein := BYTE_TO_BOOL (Maske AND V_ST);
        IF V_STELL > Y_OG THEN
            V_STELL := Y_OG;
        END_IF;
        IF V_STELL < Y_UG THEN
            V_STELL := Y_UG;
        END_IF;
        Yx := V_STELL;
    END_IF;
    IF TA_Px THEN
        Ein := P_Ein;
        IF P_STELL > Y_OG THEN
            P_STELL := Y_OG;
        END_IF;
        IF P_STELL < Y_UG THEN
            P_STELL := Y_UG;
        END_IF;
        Yx := P_STELL;
    END_IF;
    IF Stoe_Rmx THEN    (*Bei Rückmeldefehler Antrieb = Ein || Antrieb = Aus || Antrieb = Auto*)
        Maske := Konfig AND 2#00000110;
        IF Maske = 4 THEN
            Ein := Ein;
            Yx := Yx;
            ELSE IF Maske = 2 THEN
                Ein := TRUE;
                Yx := Y_OG;
                ELSE
                    Ein := FALSE;
                    Yx := Y_UG;
            END_IF;
        END_IF;
    END_IF;
ELSE
    Ein := FALSE;
    Yx := Y_UG;
END_IF;

(*Skalierung Ansteuerung*)
IF  (Y_OG - Y_UG) = 0 THEN
    Y_OUT := 0;                                    (*DIV / NULL*)
    ELSE
        m := (32767 / (Y_OG - Y_UG));            (*Steigung*)
        b := Y_UG * m * -1;                        (*Nulldurchgang*)
        Y_OUT := REAL_TO_INT (m * Yx + b);    (*Geradengleichung*)

	(*Ansteuerung gegenläufig*)
	Maske := Konfig AND 2#01000000;
	IF Maske = 64 THEN
		m :=-1;	(*Steigung*)
		b := 32767;
		Y_OUT :=REAL_TO_INT( INT_TO_REAL (Y_OUT) * m + b);
	END_IF;

	(*Ansteuerung 2-10V*)
	Maske := Konfig AND 2#00100000;
	IF Maske = 32 THEN
		m :=0.8;	(*Steigung*)
		b := 0.2 * 32767;
		Y_OUT :=REAL_TO_INT( INT_TO_REAL (Y_OUT) * m + b);
	END_IF;
END_IF;

(*Rückmeldung gegenläufig*)
Maske := Konfig AND 2#01000000;
IF Maske = 64 THEN
	m :=-1;	(*Steigung*)
	b := 32767;
	RM_Y :=REAL_TO_INT( INT_TO_REAL (RM_Y) * m + b);
END_IF;

(*Rückmeldung 2-10V*)
Maske := Konfig AND 2#00100000;
IF Maske = 32 THEN
	m :=1.25;	(*Steigung*)
	b := -0.25 * 32767;
	RM_Y :=REAL_TO_INT( INT_TO_REAL (RM_Y) * m + b);
END_IF;

(*Skalierung Rückmeldung*)
m := ((Y_OG - Y_UG) / 32767);    (*Steigung*)
b := Y_UG;                    (*Nulldurchgang*)
RM_X := m * INT_TO_REAL (RM_Y) + b;        (*Geradengleichung*)
IF RM_X < Y_UG THEN
    RM_X := Y_UG;
END_IF;
IF RM_X > Y_OG THEN
    RM_X := Y_OG;
END_IF;
IF NOT RM THEN
    RM_X := 0;
    Yx := 0;
END_IF;

Y := Yx;
(*Meldeunterdrückung*)
U_IO_Verz(IN:=U_IO, PT:=T#5s);
U_IO_X := U_IO_Verz.Q;
IF U_IO_X THEN
    NOTB    :=    NOTBx    ;
    TA_P    :=    TA_Px    ;
    TA_V    :=    TA_Vx    ;
    TA_G    :=    TA_Gx    ;
    S_TA    :=    S_TAx    ;
    STOE_RM    :=    STOE_RMx    ;
    STOE_MS    :=    STOE_MSx    ;
    STOE_FU    :=    STOE_FUx    ;
    SA    :=    SAx    ;
    Wart    :=    Wartx    ;
    Stoe_Lauf    :=    Stoe_Laufx    ;
END_IF;

Sperre:=NOT FRG;
Betrieb:=RM AND LAUF;

(****************Betriebsstundenzaehler*)

BSZ_Pumpe(
	RM:= Betrieb,
	Reset:=VISU.Reset_BSZ OR Reset_BSZ,
	INTERVALL:=Intervall_WA ,
	WERT:= BSZ,
	WARTUNG:= Wartung);


]]></ST>
    </Implementation>
    <LineIds Name="fb_Pumpe_stetig">
      <LineId Id="99" Count="0" />
      <LineId Id="104" Count="4" />
      <LineId Id="110" Count="1" />
      <LineId Id="116" Count="7" />
      <LineId Id="128" Count="232" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>